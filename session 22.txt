int array_search(int*arr,int size,const int num)
{
    int i;

    for( i=0; i<size; i++)
    {
        if(arr[i]==num)
        {
            return i;
        }
    }

    return -1;
}
========================================

int array_BinarySearch(int*arr,int size,const int num)
{
    int first,last,middle,c=0;
    first=0;
    last=size-1;

    while(1) //while(last>=first)
    {
        c++;
        middle=(first+last)/2;

        if(arr[middle]==num)
        {
            printf("c=%d\n",c);
            return middle;
        }
        else if(arr[middle]>num)
        {
            last=middle-1;
        }
        else
        {
            first=middle+1;
        }
        if(first>last)
        {
            return -1;
        }
    }
    printf("c=%d\n",c);
    return -1;

}
=======================================
void bubble_sort(int*arr,int size)
{
    int i,j,temp,c=0,sortedFlag;

    for(j=0; j<size; j++)
    {
        sortedFlag=1;
        for(i=0; i<size-1-j; i++)
        {
            c++;
            if(arr[i+1]<arr[i])
            {
                temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
                sortedFlag=0;
            }

        }
        if(sortedFlag==1)
        {
            break;
        }

    }
    printf("s=%d c=%d\n",size,c);

}

=======================================

void selection_sort(int*arr,int size) //O(n^2) , O(1)
{
    int i,j,max,last,temp;
    last=size-1;

    for(j=0; j<size; j++)
    {
        max=0;
        for(i=0; i<=last; i++)
        {
            if(arr[i]>arr[max])
            {
                max=i;
            }
        }
        temp=arr[max];
        arr[max]=arr[last];
        arr[last]=temp;
        last--;
    }



}

=========================================