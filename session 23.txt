int array_BinarySearch_rec(int*arr,int first,int last,const int num)
{
    int middle=(first+last)/2;
     if(first>last)
    {
        return -1;
    }

    else if(arr[middle]==num)
    {
        return middle;
    }

    else if (arr[middle]>num)
    {
        return array_BinarySearch_rec(arr,first,middle-1,num);
    }
    else
    {
        return array_BinarySearch_rec(arr,middle+1,last,num);
    }

}
============================================
void counting_sort(int*arr,int size)
{
    int i,count[10]= {0},max=0,j=0;
    for(i=0; i<size; i++)
    {
        count[arr[i]]++;
    }

    /*for(i=0; i<10; i++)
    {
        printf("%d   %d\n",i,count[i]);
    }*/

    for(i=0; i<10; i++)
    {
        while(count[i]>0)
        {
           arr[j]=i;
           j++;
           count[i]--;
        }
    }

}

===========================================

int pairs(int k, int size, int* arr) {

int i,j,r,c=0,r2;


//bubble_sort(arr,size);
quickSort(arr,0,size-1);

for(i=0,j=1;j<size;)
{
   r=arr[j]-arr[i];
   if(r==k)
   {
       c++;
       i++;
       j++;
   }
   else if(r>k)
   {
       i++;
   }
   else {
   j++;
   }
   
   
   
}
return  c;



}
===================================== 
//quick sort (geeksforgeeks)

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
 
// Partition the array using the last element as the pivot
int partition(int arr[], int low, int high)
{
    // Choosing the pivot
    int pivot = arr[high];
 
    // Index of smaller element and indicates
    // the right position of pivot found so far
    int i = (low - 1);
 
    for (int j = low; j <= high - 1; j++) {
 
        // If current element is smaller than the pivot
        if (arr[j] < pivot) {
 
            // Increment index of smaller element
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
 
// The main function that implements QuickSort
// arr[] --> Array to be sorted,
// low --> Starting index,
// high --> Ending index
void quickSort(int arr[], int low, int high)
{
    if (low < high) {
 
        // pi is partitioning index, arr[p]
        // is now at right place
        int pi = partition(arr, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int pairs(int k, int arr_count, int* arr) {
    
    quickSort(arr,0,arr_count-1);
    
    int i=0,j=1;
    int r,c=0;
    for(;j<arr_count;)
    {
        r=arr[j]-arr[i];
        if(r==k)
        {
            c++;
            i++;
            j++;
        }
        else if(r>k)
        {
            i++;
        }
        else 
        {
            j++;
        }
          
    }
    
  return c;
}
=====================================
void counting_sort (int *arr,int size) //generic
{
    int max=arr[0],i,j=0;
    for(i=1; i<size; i++)
    {
        if(arr[i]>max)
            max=arr[i];
    }
    max++;
    //printf("%d\n",max);
    int *count=calloc(max,4);
    for(i=0; i<size; i++)
    {
        count[arr[i]]++;
    }
    //printf("%d\n",count[100]);
    //printf("%d\n",count[7]);
    for(i=0; i<=max; i++)
    {
        while(count[i]>0)
        {
           arr[j]=i;
           j++;
           count[i]--;
        }
    }
    free(count);
}

int main()
{
    int most,num;
    int arr[]= {1,2,4,66,2,5,8,8,4,1,0,21,41,35,11,20,23,20,10,55,1,100,66,7,7,100};
    int size=sizeof(arr)/sizeof(arr[0]);
    for(int i=0; i<size; i++)
    {
        printf("%d ",arr[i]);
    }
    printf("\n");
    counting_sort(arr,size);

    for(int i=0; i<size; i++)
    {
        printf("%d ",arr[i]);
    }

    return 0;
}
==================================================