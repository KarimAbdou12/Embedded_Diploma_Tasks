void swap_pointers(char**pp1,char**pp2)
{
    int *temp;
    temp=*pp1;
    *pp1=*pp2;
    *pp2=temp;

    //  printf("f:%d   %d\n",**pp1,**pp2);
}


void arrayOfString_print(char**arr,int size)
{
    int i,j;
    for(i=0; i<size; i++)
    {
        // printf("%d\n",arr[i]);
        string_print(arr[i]);

        /* printf("%s",arr[i]);
         for(j=0;arr[i][j]!=0;j++)
         {
             printf("%c",arr[i][j]);
         }
         printf("\n");*/
    }
    printf("=======================================\n");
}

int arrayOfString_search(char**arr,int size,char*s)
{
    int i;
    for(i=0; i<size; i++)
    {
        if(string_compare4(arr[i],s)==1)
        {
            return i;
        }
    }
    return -1;
}
================================
void arrayOfString_sort(char**arr,int size)
{
    int i,j,temp,c=0,sortedFlag;

    for(j=0; j<size; j++)
    {
        sortedFlag=1;
        for(i=0; i<size-1-j; i++)
        {
            c++;
            if(string_compare6(arr[i+1],arr[i])==-1)
            {
                swap_pointers(&arr[i+1],&arr[i]);
                sortedFlag=0;
            }

        }
        if(sortedFlag==1)
        {
            break;
        }

    }
    printf("s=%d c=%d\n",size,c);

}


/**********************************************************************************/

const int notes[7]= {200,100,50,20,10,5,1};
int arr[7];


void ATM(int n)
{
    int i;
    for(i=0; i<7; i++)
    {
        arr[i]=n/notes[i];
        n=n%notes[i];
    }
}

void ATM_PRINT(void)
{
    int i;
    for(i=0; i<7; i++)
    {
        printf("%d-> %d\n",notes[i],arr[i]);
    }
}
/********************************************/
int arrayofstring_search (char**arr,int size , char *s)
{
    int i;
    for(i=0;i<size;i++)
    {
        if(string_compare(arr[i],s))
        {
            return i;
        }
    }
    return -1;
}

int string_compare3 (char*s1,char*s2)
{
  int i;
  for(i=0;s1[i]||s2[i];i++)
  {
      if(s1[i]>s2[i])
      {
          return 1;
      }
      else if(s2[i]>s1[i])
      {
          return -1;
      }
  }
  return 1;

}

int string_compare_len (char*s1,char*s2)
{
    int l1=string_len(s1);
    int l2=string_len(s2);
    if(l1>l2)
    {
        return 1;
    }
    else
    {
        return -1;
    }
}


void arrayofstring_sort (char **arr,int size)
{
    int i,j,temp,c=0,sortedFlag;

    for(j=0; j<size; j++)
    {
        sortedFlag=1;
        for(i=0; i<size-1-j; i++)
        {
            c++;
            if(string_compare_len(arr[i+1],arr[i])==-1)
            {
                swap_pointer(&arr[i+1],&arr[i]);
                sortedFlag=0;
            }

        }
        if(sortedFlag==1)
        {
            break;
        }

    }
    printf("s=%d c=%d\n",size,c);
}



int main()
{
    char s1[]="ahmed saad";
    char s2[]="nada";
    char s3[]="osama";
    char s[]="fathy";

    char *arr[]= {s1,s3,s2,"moatas","bahy","fathy","mohamed","3bsawy","abdelraman"};

    arrayofstring_print(arr,9);
    //swap_pointer(arr+1,&arr[2]);
    /*argumens of swap_pointer fun.(pointer to pointer )
    arr[2] --> address but it's address of the 3rd element of arr it have 1 derefrence
    &arr[2 --> address of the 3rd element o arr (true) it have 2 derefrence
    (same address)
    as i receve it at pointer to pointer */

    arrayofstring_sort(arr,9);
    arrayofstring_print(arr,9);

    int x=arrayofstring_search(arr,9,s);
    printf("%d\n",x);

    return 0;
}
