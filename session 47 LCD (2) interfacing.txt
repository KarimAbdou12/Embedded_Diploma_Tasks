lcd write num 

void LCD_WriteNumber(s32 num)
{
	u8 str[10],i=0;
	s8 j;
	if(num==0)
	{
		LCD_WriteChar('0');
	}
	else
	{
		if(num<0)
		{
			num=num*-1;
			LCD_WriteChar('-');
		}
		while(num)
		{
			str[i]=num%10+'0';
			i++;
			num=num/10;
		}
		for(j=i-1;j>=0;j--)
		{
			LCD_WriteChar(str[j]);
		}
	}
}


/***************************************/

			main
			====
			
	s8 i=115;
	while(1)
	{
		LCD_SetCursor(1,1);
		LCD_WriteNumber(i);
		LCD_WriteString("      ");  //<<<<<<<<
		_delay_ms(200);
		i--;
	}
	
/*************************/
print any number in 4 digits

void LCD_WriteNumber4D (u16 num)
{
	LCD_WriteChar(((num%10000)/1000)+'0');
	LCD_WriteChar(((num%1000)/100)+'0');
	LCD_WriteChar(((num%100)/10)+'0');
	LCD_WriteChar(((num%10)/1)+'0');
}

		main 
		====
	s8 i=115;
	while(1)
	{
		LCD_SetCursor(1,1);
		LCD_WriteNumber4D(i);
		LCD_WriteString("      ");
		_delay_ms(200);
		i--;
	}


/**************************/
write any number in binary

void LCD_WriteBinary(u8 num)
{
	s8 i;
	for(i=7;i>=0;i--)
	{
		LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}

/***************************/
write any number in hex 


void LCD_WriteHex(u8 num)
{
	u8 HN=num>>4;
	u8 LN=num&0x0f;
	if(HN<10)
	{
		LCD_WriteChar(HN+'0');
	}
	else
	{
		LCD_WriteChar(HN-10+'A');
	}
	if(LN<10)
	{
		LCD_WriteChar(LN+'0');
	}
	else
	{
		LCD_WriteChar(LN-10+'A');
	}
	
}

==============
void LCD_WriteHex(u8 num)
{
	u8 HN= num>>4;
	u8 LN=num&0x0f;
	
	u8 hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	
	LCD_WriteChar(hex[HN]);
	LCD_WriteChar(hex[LN]);
	
}


/***************************************/

>>> hex 4 digit ??


/***********************************/
#if LCD_MODE==_8_BIT

void WriteIns(u8 ins) 
{
	DIO_WritePin(RS,LOW);
	DIO_WritePort(LCD_PORT,ins);
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
}

void WriteData(u8 data)
{
	DIO_WritePin(RS,HIGH);
	DIO_WritePort(LCD_PORT,data);
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
}

void LCD_Init(void)
{
	_delay_ms(50);
	
	WriteIns(0x38);
	WriteIns(0x0C);//0x0e   0x0f
	WriteIns(0x01);
	_delay_ms(1);
	WriteIns(0x06);//increase DDRAM
}



#elif LCD_MODE==_4_BIT
void WriteIns(u8 ins)
{
	
	DIO_WritePin(RS,LOW);
	DIO_WritePin(D7,READ_BIT(ins,7));
	DIO_WritePin(D6,READ_BIT(ins,6));
	DIO_WritePin(D5,READ_BIT(ins,5));
	DIO_WritePin(D4,READ_BIT(ins,4));
	
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(ins,3));
	DIO_WritePin(D6,READ_BIT(ins,2));
	DIO_WritePin(D5,READ_BIT(ins,1));
	DIO_WritePin(D4,READ_BIT(ins,0));
	
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
	
}

void WriteData(u8 data)
{
	DIO_WritePin(RS,HIGH);
	DIO_WritePin(D7,READ_BIT(data,7));
	DIO_WritePin(D6,READ_BIT(data,6));
	DIO_WritePin(D5,READ_BIT(data,5));
	DIO_WritePin(D4,READ_BIT(data,4));
	
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(data,3));
	DIO_WritePin(D6,READ_BIT(data,2));
	DIO_WritePin(D5,READ_BIT(data,1));
	DIO_WritePin(D4,READ_BIT(data,0));
	
	DIO_WritePin(EN,HIGH);
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
	_delay_ms(1);
}

void LCD_Init(void)
{
	_delay_ms(50);
	WriteIns(0x02);
	WriteIns(0x28);
	WriteIns(0x0C);//0x0e   0x0f
	WriteIns(0x01);
	_delay_ms(1);
	WriteIns(0x06);//increase DDRAM
}

#endif





void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
}

void LCD_WriteNumber(s32 num)
{
	u8 str[10],i=0;
	s8 j;
	if (num==0)
	{
		LCD_WriteChar('0');
	}
	else
	{
		if (num<0)
		{
			LCD_WriteChar('-');
			num=num*-1;
		}
		while(num)
		{
			str[i]=num%10+'0';
			i++;
			num=num/10;
		}
		for (j=i-1;j>=0;j--)
		{
			LCD_WriteChar(str[j]);
		}
	}
	
}

void LCD_WriteBinary(u8 num)
{
	for(s8 i=7;i>=0;i--){
		LCD_WriteChar(READ_BIT(num,i)+'0');
	}
}


void LCD_WriteNumber4D(u16 num)
{
	LCD_WriteChar(((num%10000)/1000)+'0');
	LCD_WriteChar(((num%1000)/100)+'0');
	LCD_WriteChar(((num%100)/10)+'0');
	LCD_WriteChar(((num%10)/1)+'0');
}

void LCD_WriteString(u8*str)
{
	u8 i;
	for (i=0;str[i];i++)
	{
		WriteData(str[i]);
	}
}


void LCD_SetCursor(u8 line,u8 cell)
{
	if (line==1)
	{
		WriteIns(0x80|(cell-1));
	}
	else if (line ==2)
	{
		WriteIns(0x80|0x40|(cell-1));
	}
}

void LCD_Clear(void)
{
	WriteIns(0x01);
	_delay_ms(1);
}

void LCD_WriteHex(u8 num){
	
	u8 HN=num>>4;
	u8 LN=num&0x0f;
	const u8 hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	if (HN<10)
	{
		LCD_WriteChar(HN+'0');
	}
	else
	{
		LCD_WriteChar(HN+'A'-10);
	}
	LCD_WriteChar(hex[LN]);
}

=======================


void LCD_CustomChar(u8 location,u8*pattern)
{
	WriteIns(0X40+location*8);
	for (u8 i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}

		main
		==== 

u8  customChar[] = {
		0x06,
		0x06,
		0x04,
		0x0E,
		0x15,
		0x04,
		0x0A,
		0x11
	};
	LCD_CustomChar(3,customChar);
	LCD_SetCursor(1,1);
	LCD_WriteChar(3);
	
	
=========================
void LCD_FUNC(void)
{
	WriteIns(0X40+0);
	WriteData(0X55);
	WriteData(0XAA);
	WriteData(0X55);
	WriteData(0XAA);
	WriteData(0X55);
	WriteData(0XAA);
	WriteData(0X55);
}


int main(void)
{
	DIO_Init();
	LCD_Init();
	
	LCD_FUNC();
	LCD_SetCursor(1,1);
	LCD_WriteChar(0);

}
===========================
